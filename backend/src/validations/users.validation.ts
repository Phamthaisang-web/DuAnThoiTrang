import * as yup from "yup";

// Regex ki·ªÉm tra ObjectId c·ªßa MongoDB (24 k√Ω t·ª± hex)
const objectIdRegex = /^[a-fA-F0-9]{24}$/;

// Regex ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam
// ‚úÖ H·ª£p l·ªá: 09xxxxxxxx, 03xxxxxxxx, 07xxxxxxxx, 08xxxxxxxx, 05xxxxxxxx
const vietnamPhoneRegex =
  /^(0|\+84)(3[2-9]|5[6|8|9]|7[0|6-9]|8[1-9]|9[0-9])[0-9]{7}$/;

// -------------------------
// üîπ Schema g·ª≠i OTP (ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°m)
// -------------------------
const requestOtpSchema = yup
  .object({
    body: yup.object({
      fullName: yup
        .string()
        .min(3, "H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±")
        .max(255, "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±")
        .required("H·ªç t√™n l√† b·∫Øt bu·ªôc"),

      email: yup
        .string()
        .email("Email kh√¥ng h·ª£p l·ªá")
        .required("Email l√† b·∫Øt bu·ªôc"),

      password: yup
        .string()
        .min(6, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
        .max(255, "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±")
        .required("M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc"),

      phone: yup
        .string()
        .matches(
          vietnamPhoneRegex,
          "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (ph·∫£i l√† s·ªë Vi·ªát Nam)"
        )
        .optional(),

      role: yup
        .string()
        .oneOf(["user", "admin"], "Vai tr√≤ kh√¥ng h·ª£p l·ªá")
        .optional(),
      isActive: yup.boolean().optional(),
    }),
  })
  .required();

// -------------------------
// üîπ Schema x√°c minh OTP
// -------------------------
const verifyOtpSchema = yup
  .object({
    body: yup.object({
      email: yup
        .string()
        .email("Email kh√¥ng h·ª£p l·ªá")
        .required("Email l√† b·∫Øt bu·ªôc"),
      otp: yup
        .string()
        .matches(/^\d{6}$/, "OTP ph·∫£i g·ªìm 6 ch·ªØ s·ªë")
        .required("M√£ OTP l√† b·∫Øt bu·ªôc"),
    }),
  })
  .required();

// -------------------------
// üîπ Schema c·∫≠p nh·∫≠t user (PUT /users/:id)
// -------------------------
const updateUserSchema = yup
  .object({
    params: yup.object({
      id: yup
        .string()
        .matches(objectIdRegex, "ID kh√¥ng h·ª£p l·ªá")
        .required("ID l√† b·∫Øt bu·ªôc"),
    }),
    body: yup.object({
      fullName: yup
        .string()
        .min(3, "H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±")
        .max(255, "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±")
        .optional(),

      email: yup.string().email("Email kh√¥ng h·ª£p l·ªá").optional(),

      password: yup
        .string()
        .min(6, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
        .max(255, "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±")
        .optional(),

      phone: yup
        .string()
        .matches(
          vietnamPhoneRegex,
          "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (ph·∫£i l√† s·ªë Vi·ªát Nam)"
        )
        .optional(),

      role: yup
        .string()
        .oneOf(["user", "admin"], "Vai tr√≤ kh√¥ng h·ª£p l·ªá")
        .optional(),
      isActive: yup.boolean().optional(),
    }),
  })
  .required();

// -------------------------
// üîπ Schema l·∫•y user theo ID
// -------------------------
const getUserByIdSchema = yup
  .object({
    params: yup.object({
      id: yup
        .string()
        .matches(objectIdRegex, "ID kh√¥ng h·ª£p l·ªá")
        .required("ID l√† b·∫Øt bu·ªôc"),
    }),
  })
  .required();

// -------------------------
// üîπ Schema x√≥a user theo ID
// -------------------------
const deleteUserByIdSchema = yup
  .object({
    params: yup.object({
      id: yup
        .string()
        .matches(objectIdRegex, "ID kh√¥ng h·ª£p l·ªá")
        .required("ID l√† b·∫Øt bu·ªôc"),
    }),
  })
  .required();

// -------------------------
// üîπ Schema truy v·∫•n danh s√°ch user (GET /users)
// -------------------------
const getAllUsersSchema = yup
  .object({
    query: yup.object({
      page: yup.number().integer().positive().optional(),
      limit: yup.number().integer().positive().optional(),

      // ‚úÖ S·ª≠a ƒë√∫ng h∆∞·ªõng sort
      sort_by: yup
        .string()
        .matches(
          /^(createdAt|fullName|email|role)$/,
          "Tr∆∞·ªùng s·∫Øp x·∫øp kh√¥ng h·ª£p l·ªá"
        )
        .optional(),

      sort_type: yup
        .string()
        .matches(/^(asc|desc)$/, "Ki·ªÉu s·∫Øp x·∫øp kh√¥ng h·ª£p l·ªá (asc ho·∫∑c desc)")
        .optional(),

      keyword: yup
        .string()
        .min(2, "T·ª´ kh√≥a ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±")
        .max(50)
        .optional(),
    }),
  })
  .required();

export default {
  requestOtpSchema,
  verifyOtpSchema,
  updateUserSchema,
  getUserByIdSchema,
  deleteUserByIdSchema,
  getAllUsersSchema,
};
