import { Request, Response } from "express";
import { OpenAI } from "openai";
import productService from "../services/product.service";
import brandModel from "../models/brand.model";
import categoryModel from "../models/category.model";

// ‚úÖ Kh·ªüi t·∫°o SDK OpenRouter
const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: "https://openrouter.ai/api/v1",
  defaultHeaders: {
    "HTTP-Referer": "https://your-app-testing.co", // ‚ö†Ô∏è Thay b·∫±ng domain th·∫≠t
    "X-Title": "ThoiTrang", // ‚ö†Ô∏è T√™n app c·ªßa b·∫°n
  },
});

export const askProductAI = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { question } = req.body;

    if (!question || typeof question !== "string") {
      res.status(400).json({ error: "‚ùå C√¢u h·ªèi kh√¥ng h·ª£p l·ªá." });
      return;
    }

    // 1. D√πng GPT ƒë·ªÉ ph√¢n t√≠ch c√¢u h·ªèi
    const filterAnalysis = await openai.chat.completions.create({
      model: "openai/gpt-3.5-turbo-0613",
      messages: [
        {
          role: "system",
          content: `B·∫°n l√† c√¥ng c·ª• ph√¢n t√≠ch c√¢u h·ªèi ƒë·ªÉ sinh object JSON filter s·∫£n ph·∫©m theo c√°c tr∆∞·ªùng: 
- name: t√™n s·∫£n ph·∫©m
- minPrice: gi√° th·∫•p nh·∫•t (VND)
- maxPrice: gi√° cao nh·∫•t (VND)
- sizes: c√°c size (v√≠ d·ª•: "S", "M", "L", "XL")
- colors: c√°c m√†u (v√≠ d·ª•: "ƒë·ªè", "xanh", "ƒëen")
- brand: t√™n th∆∞∆°ng hi·ªáu (v√≠ d·ª•: "Nike", "Adidas")
- category: danh m·ª•c s·∫£n ph·∫©m (v√≠ d·ª•: "√°o thun", "qu·∫ßn jean")

H√£y ch·ªâ tr·∫£ v·ªÅ object JSON ƒë√∫ng ƒë·ªãnh d·∫°ng.`,
        },
        {
          role: "user",
          content: `Ph√¢n t√≠ch c√¢u h·ªèi: "${question}". Tr·∫£ v·ªÅ object JSON.`,
        },
      ],
      temperature: 0.2,
    });

    const filterText = filterAnalysis.choices[0].message.content || "{}";
    const filterQuery = JSON.parse(filterText);

    // 2. Chu·∫©n h√≥a brand v√† category t·ª´ t√™n ‚Üí ObjectId
    if (filterQuery.brand) {
      const brandDoc = await brandModel.findOne({
        name: new RegExp(`^${filterQuery.brand}$`, "i"),
      });
      if (brandDoc) {
        filterQuery.brand = brandDoc._id.toString();
      } else {
        delete filterQuery.brand;
      }
    }

    if (filterQuery.category) {
      const categoryDoc = await categoryModel.findOne({
        name: new RegExp(`^${filterQuery.category}$`, "i"),
      });
      if (categoryDoc) {
        filterQuery.category = categoryDoc._id.toString();
      } else {
        delete filterQuery.category;
      }
    }

    // 3. L·∫•y danh s√°ch s·∫£n ph·∫©m
    const { products } = await productService.getAllProducts({
      ...filterQuery,
      limit: 10,
    });

    if (products.length === 0) {
      res.json({ answer: "‚ùå Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu." });
      return;
    }

    // 4. T·∫°o danh s√°ch m√¥ t·∫£ s·∫£n ph·∫©m
    const productList = products
      .map((p: any) => `- ${p.name} (${p.price.toLocaleString()} VND)`)
      .join("\n");

    // 5. GPT t·∫°o c√¢u tr·∫£ l·ªùi th√¢n thi·ªán
    const chatResponse = await openai.chat.completions.create({
      model: "openai/gpt-3.5-turbo-0613",
      messages: [
        {
          role: "system",
          content:
            "B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng th√¢n thi·ªán, t∆∞ v·∫•n s·∫£n ph·∫©m th·ªùi trang b·∫±ng ti·∫øng Vi·ªát.",
        },
        {
          role: "user",
          content: `Danh s√°ch s·∫£n ph·∫©m:\n${productList}\n\nKh√°ch h·ªèi: "${question}"`,
        },
      ],
    });

    const answer =
      chatResponse.choices[0].message.content ||
      "ü§ñ Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.";

    res.json({ answer });
  } catch (err) {
    console.error("L·ªói AI:", err);
    res.status(500).json({ error: "‚ùå L·ªói h·ªá th·ªëng AI" });
  }
};
